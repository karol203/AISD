from array import array
from ctypes import Array
from typing import Tuple
count = 0
# ZADANIE 1
def numbers(n:int):
    global count
    if n <= 0:
        return 0
    for i in range(n,0,-1):
        print(i)
        count += 1
    print(f"Liczba ilosci operacji {count}")
def numbersrek(n: int):
    if n <= 0:
        return 0
    count += 1
    print(n)
    numbersrek(n-1)


# ZADANIE 2
def reverse(txt: str):
    global count
    dlu=len(txt)
    rev = ""
    for i in range(dlu):
        rev+=txt[dlu-i-1]
        count += 1
    return rev

def reverserek(txt:str):
    global dlugosc
    global count
    count+=1
    dlugosc = len(txt)
    if dlugosc==1:
        return txt
    return reverserek(txt[1:]) + txt[0]



#ZADANIE 3
def binary_search(n:int, m:int, p:int,numbers: Array) -> Tuple[bool, int]:
    global count
    n=0
    m =len(numbers)-1
    while n<=m:
        count+=1
        srodek = (n+m)//2
        if numbers[srodek] == p:
            return True, srodek
        elif numbers[srodek] > p:
            m = srodek-1
        else:
            n = srodek+1

    return False, -1
def binary_search_rek(n:int, m:int, p:int, numbers: Array) -> Tuple[bool,int]:
    global count
    srodek = (n+m)//2
    count +=1
    if n>m:
        return False,-1
    if numbers[srodek] == p:
        return True,srodek
    elif numbers[srodek]<p:
        return binary_search_rek(srodek+1,m,p,numbers)
    else:
        return binary_search_rek(n,srodek-1,p,numbers)

def main():
    ints = array("I", [1, 3, 4, 6, 7, 8, 10, 13, 14, 18, 19, 21, 24, 37, 40, 45, 71])

    print(binary_search_rek(0,16,8,ints))
    print(count)


main()
